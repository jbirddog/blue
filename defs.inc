
INPUT_BUFFER_OFFSET = 0
INPUT_BUFFER_SIZE = 2048

DATA_STACK_OFFSET = INPUT_BUFFER_OFFSET + INPUT_BUFFER_SIZE
DATA_STACK_SIZE = 1024

VM_DATA_OFFSET = DATA_STACK_OFFSET + DATA_STACK_SIZE
VM_DATA_SIZE = 256

RESERVED = 768

OPCODE_MAP_OFFSET = VM_DATA_OFFSET + VM_DATA_SIZE + RESERVED
OPCODE_MAP_SIZE = 4096

CODE_BUFFER_OFFSET = OPCODE_MAP_OFFSET + OPCODE_MAP_SIZE
CODE_BUFFER_SIZE = 4096

MEM_SIZE = CODE_BUFFER_OFFSET + CODE_BUFFER_SIZE
assert MEM_SIZE = (4096 * 3)

VM_DATA_OFFSET_STATE = 0 shl 3
VM_DATA_OFFSET_INSTRUCTION_POINTER = 1 shl 3
VM_DATA_OFFSET_INPUT_BUFFER_LOCATION = 2 shl 3
VM_DATA_OFFSET_INPUT_BUFFER_SIZE = 3 shl 3
VM_DATA_OFFSET_DATA_STACK_LOCATION = 4 shl 3
VM_DATA_OFFSET_DATA_STACK_HERE_LOCATION = 5 shl 3
VM_DATA_OFFSET_DATA_STACK_SIZE = 6 shl 3
VM_DATA_OFFSET_OPCODE_MAP_LOCATION = 7 shl 3
VM_DATA_OFFSET_CODE_BUFFER_LOCATION = 8 shl 3
VM_DATA_OFFSET_CODE_BUFFER_HERE_LOCATION = 9 shl 3
VM_DATA_OFFSET_CODE_BUFFER_SIZE = 10 shl 3
VM_DATA_OFFSET_OPCODE_HANDLER_LOCATION = 11 shl 3
VM_DATA_OFFSET_OPCODE_INVALID_HANDLER_LOCATION = 12 shl 3

OPCODE_HANDLER_COMPILE = opcode_handler_compile
OPCODE_HANDLER_INTERPRET = opcode_handler_interpret
OPCODE_HANDLER_INVALID = opcode_handler_invalid

OPCODE_ENTRY_FLAG_IMMEDIATE = 1 shl 0


; expects vm data field offset in rsi
vm_data_field_get:
	add	esi, VM_DATA_OFFSET
	add	rsi, [mem]

	lodsq
	
	ret

; expects vm data field offset in rdi and value in rax
vm_data_field_set:
	add	edi, VM_DATA_OFFSET
	add	rdi, [mem]

	stosq
	
	ret
