global _start

: syscall ( num:eax -- result:eax ) syscall ;

: exit ( status:edi -- noret ) 60 syscall ;
: exit.ok ( -- noret ) 0 exit ;
: exit.syserr ( err:eax -- noret ) neg exit ;

: unwrap ( result:eax -- value:eax ) dup 0 cmp ' exit.syserr xl ;

: syscall3 ( arg2:esi arg3:edx arg1:edi num:eax -- result:eax ) syscall ;

1 const stdout

: write ( buf len -- result ) stdout 1 syscall3 ;
: write! ( buf len -- wrote ) write unwrap ;

\ TODO writeln

: lf ( -- ) 10 decb 
: lf ( -- wrote ) ' lf 1 write! ;

\ TODO this is an example of invalid stack handling due to lodsb/loopne
: find0 ( start:rsi max:rcx -- end:rsi ) lodsb 0 cmp latest loopne ; 

: range-len ( start:rdi end:rsi -- len:rsi ) swap sub dec ;
: cstr-range ( start:rdi -- begin:rdi end:rsi ) dup -1 find0 ;
: strlen ( str:rsi -- len:rsi ) cstr-range range-len ;

\ TODO lea
\ TODO ideally shouldn't need these empty words
: argv ( rbp -- rbp ) ;
: next-arg ( argv:rbp -- arg:rdx ) 8 add [] 
: deref ( rdx -- rdx ) ; 

\ 1 resq argc
\ 1 resq argv

\ : argc! ( rsp -- ) argc ! ;
\ : argv! ( rbp -- ) 8 add argv ! ;

\ need to next-arg dup len writeln
: _start ( rsp -- noret ) argv next-arg dup strlen xchg write! lf exit.ok ;

\ argc [rsp] -> rcx for looping over argv
\ argv lea rsi, [rsp+8], lodsq loop will load each string ptr into rax
\ scan rax til 0 to find length
\ print with length
\ print new line
