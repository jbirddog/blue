global _start

: syscall ( num:eax -- result:eax ) syscall ;

60 const exit

: exit ( status:edi -- noret ) exit syscall ;
: exit.ok ( -- noret ) 0 exit ;
: exit.syserr ( err:eax -- noret ) neg exit ;

: syscall ( arg2:esi arg3:edx arg1:edi num:eax -- result:eax ) syscall ;

: unwrap ( result:eax -- value:eax ) dup 0 cmp ' exit.syserr xl ;
: ordie ( result:eax -- ) unwrap drop ;

1 const stdout
1 const write

: write.stdout ( buf len -- wrote ) stdout write syscall ;
: write ( buf len -- ) write.stdout ordie ;

1 const lf.len

: lf ( -- ) 10 decb 
: lf ( -- ) ' lf lf.len write ;

: writeln ( buf len -- ) write lf ; 

\ TODO this is an example of invalid stack handling due to lodsb/loopne
: find0 ( start:rsi max:rcx -- end:rsi ) lodsb 0 cmp latest loopne ; 

: range-len ( start:rdi end:rsi -- len:rsi ) swap sub dec ;
: cstr-range ( start:rdi -- begin:rdi end:rsi ) dup -1 find0 ;
: strlen ( str:rsi -- len:rsi ) cstr-range range-len ;

\ TODO lea
: next-arg ( argv:rbp -- arg:rdx ) 8 add [] 
: _ ( rdx -- rdx ) ; \ TODO ideally shouldn't need

1 resq argc
1 resq argv

: argc! ( rsp -- ) argc ! ;
: argv! ( rbp -- ) 8 add argv ! ;

\ need to next-arg dup len writeln
: _start ( rsp -- noret ) next-arg dup strlen xchg writeln exit.ok ;
