# BlueVM

Minimalistic 64 bit virtual machine inspired by Forth. This is the reference implementation for x86_64 Linux.

The BlueVM aims to:

1. Have a reasonably small, simplistic and hackable codebase
1. Support execution of any previously compiled machine or bytecode
1. Provide a minimal set of opcodes that can be extended by the host
1. Serve as the basis for minimalistic handcrafted applications
1. Bring some fun back into the world

BlueVM bytecode is stored in block sized (1024 byte) files that, by convention, have a `.bs0` (BlueVM Stage 0)
extension.

## Building

To build the BlueVM, tools and examples run `make`.

## Block Structure

The BlueVM binary consists of six blocks (1024 bytes each) in rwx memory:

0. Core VM machine code (including ELF headers)
0. BlueVM Opcodes 0x00 - 0x3F
0. BlueVM Opcodes 0x40 - 0x7F
0. Extended Opcodes 0x80 - 0xBF
0. Extended Opcodes 0xC0 - 0xFF
0. Boot sector (512 bytes), Return Stack (256 bytes), Data Stack (256 bytes)

BlueVM also reserves space for the following blocks in rwx memory:

6. Application block
6. Code buffer
6. Application block
6. Application block
6. Application block

BlueVM itself performs no allocations once it is loaded into memory.

The block structure makes it very easy to patch or slice a BlueVM binary to create a custom standalone executable.
As a quick example, assuming you have a `obj/hello_world.bs0` file compiled with `blasm` and a `bin/bluevm`:

```
$ dd if=bin/bluevm of=bin/bluevm_noib bs=1024 count=5 status=none && \
	cat bin/bluevm_noib obj/hello_world.bs0 > bin/hello_world && \
	chmod +x bin/hello_world && \
	./bin/hello_world
Hello, World!
```

## Boot

The default boot sector reads a block from stdin into Block 6 and `setip`s to that location. A custom boot sector
can be spliced in to your binary if the default one does not suffice. For example, `tools/bth` reads a file from
`argv[1]`, runs the supplied tests and writes `TAP` output.

## Execution

BlueVM follows a simple byte oriented execution strategy:

1. Read byte from and increment instruction pointer
1. Locate the opcode entry in the opcode table
   1. If interpreting, call the opcode entry's code address
   1. If compiling, copy number of bytes equal to the opcode entry's length to the code buffer and advance `here`
1. Goto 1

Because of this "late binding" approach, the host can change the values that the BlueVM uses to execute. The
interpreter requires that the host termintes execution properly. One way to do this is with the `halt` opcode.

## Opcode Map Structure

Each entry in the opcode map is 16 bytes.

1. Flags (1 byte)
1. Size (1 byte)
1. Code (14 bytes)
   1. Either 8 bytes for addr and 6 empty
   1. Or 14 bytes available for byte or machine code

## Opcodes

Opcodes are subject to change.

### VM Low/High

| Opcode | Name | Stack Effect | Description |
|----|----|----|----|
_OPCODE_TABLE_

### Extended Low/High

Host applications are free to implement their own opcodes which can be spliced into a BlueVM binary. For an example
see `tools/bth`.

## Machine Code Contract

If executing machine code with BlueVM, take note of the reserved registers:

| Register | Purpose |
|----|----|
| r12 | Top of Data Stack |
| r13 | Top of Return Stack |
| r14 | Instruction Pointer |
| r15 | Opcode Handler |

## Tools/Examples

Along with the code for BlueVM this repository also contains some tools and examples that can be used as reference:

| Name | Descripton | Location |
|----|----|----|
| blasm | Assembles BlueVM bytecode block files using `fasmg` | lang/blasm |
| bth | Patched version of the BlueVM with extended opcodes to facilitate testing. | tools/bth |

### Ideas for more tools/examples

1. bldis - bs0->bla disassembler
1. Tool to create string file from an ops tbl file, to be used by bldis
1. Tool to patch a BlueVM binary with custom blocks
   1. Would also change binary/reserved size in elf headers
   1. Remove the reserved blocks from the binary
1. Tool to check stack effects

## TODOs

1. Phase out Code Buffer in favor of user specified blocks
   1. change here to dst
   1. change ip to here
   1. change setip to jmp
   1. setincx uses dst instead of stack
   1. cx can be removed in favor of setincx
1. If dst works out, add src for use with atincx, cpincx
1. Tweak calls
   1. Rename call to calla
   1. Rename mccall to callma
   1. Add callr
   1. Add callmr
1. Get some writing about BlueVM, blasm, bth
1. Bug: add/remove ops and `make` fails until `make clean`
1. Bring back a simpiler version of the `blue` language
1. See about re-arranging >r order in op_compile_begin to simplify it and op_compile_end
1. Grok more fasmg magic to improve blasm syntax
