global _start

: syscall ( num:eax -- result:eax ) syscall ;

60 const exit

: exit ( status:edi -- noret ) exit syscall ;
: exit.ok ( -- noret ) 0 exit ;
: exit.syserr ( err:eax -- noret ) neg exit ;

: unwrap ( result:eax -- value:eax ) dup 0 cmp ' exit.syserr xl ;
: ordie ( result -- ) unwrap drop ;

2 const open

: syscall.open ( arg1:edi arg2:esi arg3:edx -- result:eax ) open syscall ;
: open ( pathname flags mode -- fd ) syscall.open unwrap ;

3 const close

: syscall.close ( arg1:edi -- result:eax ) close syscall ;
: close ( fd -- ) syscall.close ordie ;

hide syscall

: syscall ( arg1:edi arg2:esi num:eax -- result:eax ) syscall ;

83 const mkdir

: mkdir ( pathname mode -- ) mkdir syscall ordie ;

\ TODO base 8 would be interesting here

1 const forWriting
64 const create
512 const truncate

create forWriting or truncate or const flags

256 const userCanRead
128 const userCanWrite
64 const userCanExecute
32 const groupCanRead
8 const groupCanExecute

userCanRead userCanWrite or groupCanRead or const mode

: create-file ( pathname -- ) flags mode open close ;

mode userCanExecute or groupCanExecute or const mode

: make-directory ( pathname -- ) mode mkdir ;

: create-files ( -- ) s" output.txt" drop create-file ;
: make-directories ( -- ) s" docs" drop make-directory ;

: _start ( -- noret ) create-files make-directories exit.ok ;
