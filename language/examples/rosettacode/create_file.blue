global _start

: syscall ( num:eax -- result:eax ) syscall ;

: exit ( status:edi -- noret ) 60 syscall ;
: exit.ok ( -- noret ) 0 exit ;
: exit.syserr ( err:eax -- noret ) neg exit ;

: unwrap ( result:eax -- value:eax ) dup 0 cmp ' exit.syserr xl ;
: ordie ( result -- ) unwrap drop ;

: open ( pathname:edi flags:esi mode:edx -- fd:eax ) 2 syscall unwrap ;
: close ( fd:edi -- ) 3 syscall ordie ;

: mkdir ( pathname:edi mode:esi -- ) 83 syscall ordie ;

\ TODO base 8 would be interesting here

1 const forWriting
64 const create
512 const truncate

create forWriting or truncate or const flags

256 const userCanRead
128 const userCanWrite
64 const userCanExecute
32 const groupCanRead
8 const groupCanExecute

userCanRead userCanWrite or groupCanRead or const mode

: create-file ( pathname -- ) flags mode open close ;

mode userCanExecute or groupCanExecute or const mode

: make-directory ( pathname -- ) mode mkdir ;

: create-files ( -- ) s" output.txt" drop create-file ;
: make-directories ( -- ) s" docs" drop make-directory ;

: _start ( -- noret ) create-files make-directories exit.ok ;
