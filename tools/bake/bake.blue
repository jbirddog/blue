import linux/base
import linux/x8664/syscalls
import linux/x8664/error_handling
import linux/x8664/convenience
import x8664/strings
import convenience

global _start

\ TODO compile time concat
: build-dir ( -- ) c" .build/" ; inline
: bin-dir ( -- ) c" .build/bin/" ; inline 
: obj-dir ( -- ) c" .build/obj/" ; inline

: make-build-dirs ( -- )
	build-dir mkdir
	bin-dir mkdir
	obj-dir mkdir 
;

1 resq cmd-name
1 resq blue-file
1 resq envp

\ TODO these are needed because we can't currently `@ var !` and retain operation size
: cmd-name! ( rcx -- ) cmd-name ! ;
: blue-file! ( rcx -- ) blue-file ! ;

: usage ( -- noret ) s" 
	usage: bake cmd somefile.blue
" 
	type bye 
;

: check-argc ( rax -- ) @ 3 cmp ' usage xne ;
: first-arg ( rax -- rax ) 16 add ; 
: environment ( rax -- rax ) 24 add ; 
: parse-args ( rax -- ) dup dup dup 
	check-argc
	first-arg @ cmd-name!
	c" bake.blue" blue-file! \ TODO second-arg is not right
	environment envp !
;

512 const max-file-name-len

max-file-name-len resb base-file
max-file-name-len resb assembly-file
max-file-name-len resb object-file
max-file-name-len resb binary-file

\ TODO should drop .blue explicitly vs taking 5 off the length...
: build-base-file-name ( -- ) 
	blue-file @ cstr>str 5 sub base-file copy-str
;

: build-assembly-file-name ( -- ) 
	base-file assembly-file copy-cstr 
	s" .asm" append-str
;
 
: build-object-file-name ( -- ) 
	obj-dir object-file copy-cstr 
	base-file append-cstr
	s" .o" append-str
;

: build-binary-file-name ( -- ) 
	bin-dir binary-file copy-cstr
	base-file append-cstr
;

: build-output-file-names ( -- )
	build-base-file-name 
	build-assembly-file-name 
	build-object-file-name
	build-binary-file-name 
;

1 resq env-file
1 resq env-arg0
1 resq execve-file
1 resq execve-arg0
1 resq execve-arg1
1 resq execve-arg2
1 resq execve-arg3
1 resq execve-arg4

\ TODO blocked by operation size issue
\ 4 resq execve-argv 

: execve-via-env ( -- noret )
	c" env" env-arg0 !
	c" /usr/bin/env" env-arg0 envp @ execve ;

\ TODO these are here to work around the operation size issue
: set-args ( arg1:rsi arg2:rax arg3:rcx -- ) execve-arg3 ! execve-arg2 ! execve-arg1 ! ;
: clear-args ( -- ) 0 0 0 set-args ;
: prep-execve ( file:rsi arg0:rax -- ) execve-arg0 ! execve-file ! clear-args ;

: generate-assembly ( -- ) 
	c" blue" blue-file @ prep-execve 
	fork dup 0 cmp ' execve-via-env xe
	waitpid 
;

: compile-assembly ( -- ) 
	c" nasm" assembly-file prep-execve
	c" -f" execve-arg1 !
	c" elf64" execve-arg2 !
	c" -o" execve-arg3 !
	object-file execve-arg4 !
	fork dup 0 cmp ' execve-via-env xe
	waitpid
;

: link-binary ( -- ) 
	c" ld" object-file prep-execve
	c" -o" execve-arg1 !
	binary-file execve-arg2 !
	fork dup 0 cmp ' execve-via-env xe
	waitpid
;

\ TODO check wait-status after each call
: do-build ( -- ) 
	generate-assembly
	compile-assembly
	link-binary 
;

: build ( -- noret ) do-build bye ;

\ TODO needs to forward args
: run ( -- noret ) 
	do-build
	binary-file 0 prep-execve
	execve-via-env
	bye
;

: cmd-table ( -- noret )
	decb( 0 0 0 98 117 105 108 100 ) ' build decq
	decb( 0 0 0 0 0 114 117 110 ) ' run decq
;

: cmd-key ( qword:rax len:rcx -- key:rax ) 8 sub neg 3 shl shl ;
: cstr>cmd-key ( cstr:rdx -- key:rax ) cstr>str swap @ swap cmd-key ;
: call-cmd ( cmd:rdi -- noret ) @ call ;

: call-cmd-with-key ( key:rax -- noret ) 2 ' cmd-table rot
: scan-cmd-table ( tries:ecx tbl:rdi key:rax -- noret ) 
	scasq ' call-cmd xe drop 8 add latest loop
	usage
;

: call-named-cmd ( name:rdx -- noret ) cstr>cmd-key call-cmd-with-key ;
: call-specified-cmd ( -- noret ) cmd-name @ call-named-cmd ;

: _start ( rsp -- noret ) 
	parse-args
	make-build-dirs 
	build-output-file-names
	call-specified-cmd
;
