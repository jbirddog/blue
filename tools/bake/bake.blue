import linux/base
import linux/x8664/syscalls
import linux/x8664/error_handling
import linux/x8664/convenience
import x8664/strings
import convenience
import args
import file_names
import exec

global _start

: generate-assembly ( -- ) 
	c" blue" blue-file @ prep-execve 
	spawn 
;

: compile-assembly ( -- ) 
	c" nasm" assembly-file prep-execve
	c" -f" exec-arg1 !
	c" elf64" exec-arg2 !
	c" -o" exec-arg3 !
	object-file exec-arg4 !
	spawn
;

: link-binary ( -- ) 
	c" ld" object-file prep-execve
	c" -o" exec-arg1 !
	binary-file exec-arg2 !
	spawn
;

\ TODO check wait-status after each call
: build ( -- ) 
	generate-assembly
	compile-assembly
	link-binary 
;

\ TODO needs to forward args
: run ( -- noret ) 
	build
	binary-file 0 prep-execve
	execvpe
;

: cmd-table ( -- noret )
	decb( 0 0 0 98 117 105 108 100 ) ' build decq
	decb( 0 0 0 0 0 114 117 110 ) ' run decq
;

: cmd-key ( qword:rax len:rcx -- key:rax ) 8 sub neg 3 shl shl ;
: cstr>cmd-key ( cstr:rdx -- key:rax ) cstr>str swap @ swap cmd-key ;
: call-cmd ( cmd:rdi -- noret ) @ call bye ;

: call-cmd-with-key ( key:rax -- noret ) 2 ' cmd-table rot
: scan-cmd-table ( tries:ecx tbl:rdi key:rax -- noret ) 
	scasq ' call-cmd xe drop 8 add latest loop
	usage
;

: call-named-cmd ( name:rdx -- noret ) cstr>cmd-key call-cmd-with-key ;
: call-specified-cmd ( -- noret ) cmd-name @ call-named-cmd ;

: _start ( rsp -- noret ) 
	parse-args
	make-build-dirs 
	build-output-file-names
	call-specified-cmd
;
