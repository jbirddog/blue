global _start

: syscall ( num:eax -- result:eax ) syscall ;

: write ( buf:esi len:edx fd:edi -- result:eax ) 1 syscall ;
: execve ( filename:edi argv:esi env:edx -- result:eax ) 59 syscall ;
: exit ( status:edi -- noret ) 60 syscall ;
: mkdir ( path:edi mode:esi -- result:eax ) 83 syscall ;

: die ( err:eax -- noret ) neg exit ;
: unwrap ( result:eax -- value:eax ) dup 0 cmp ' die xl ;
: ordie ( result -- ) unwrap drop ;
: ignore ( result:eax err:edi -- ) swap dup rot cmp ' ordie xne drop ;

1 const stdout
-17 const exists

: bye ( -- noret ) 0 exit ;
: type ( buf len -- ) stdout write ordie ;

: mkdir ( path -- ) 0750 mkdir exists ignore ;

: make-build-dirs ( -- )
	c" .build/" mkdir
	c" .build/bin/" mkdir
	c" .build/obj/" mkdir ;

1 resq cmd
1 resq blue-file

: usage ( -- noret ) s" 
	usage: bake cmd file
" 
	type bye ;

\ TODO move rsp into rax? early to avoid all the inlines
\ inline not flowing is causing the extra dups in parse-args

: check-argc ( rsp -- ) @ 3 cmp ' usage xne ; inline
: first-arg ( rsp -- rsp ) 16 add ; inline
: next-arg ( rsp -- rsp ) 8 add ; inline
: parse-args ( rsp -- ) 
	dup check-argc 
	dup first-arg cmd !
	next-arg blue-file ! 
; inline

: _start ( rsp -- noret ) parse-args make-build-dirs bye ;
