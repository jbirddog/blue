; low ops used for testing and producing TAP output

opcode_tbl:
.offset = 0x80

opBI	op_tst, 1, 0	;	( -- a )	Push addr of TAP output's start
	litb	0xC0
	op
	ret
end_op

opBI	op_thr, 1, 0	;	( -- a )	Push addr of TAP output's here
	litq	0x00
	ret
end_op

opBI	op_thrM, 1, 0	;	( -- a )	Push addr of TAP output's here modification point
	litq	op_thr_code
	op
	litb	0x03
	add
	ret
end_op

opBI	op_setthr, 1, 0	;	( a -- )	Set addr of TAP output's here
	callop	op_thrM_code
	swap
	setq
	ret
end_op

opBI	op_test, 1, 0	;	( w -- )	Initialize a test suite
	callop	op_tst_code
	callop	op_setthr_code
	ret
end_op

opBI	op_preplan, 1, 0	;	( -- a )	Write the static 1.. part of the plan and push TAP output's here
	callop	op_thr_code
	litw	'1.'
	setincw
	litb	'.'
	setincb
	ret
end_op

opBI	op_plan, 1, 0	;	( w -- )	Plan w tests where w is two ascii characters such as '03'
	callop	op_preplan_code
	swap
	setincw
	litb	10
	setincb
	callop	op_setthr_code
	ret
end_op

opBI	op_done, 1, 0	;	( -- )	Writes TAP output to stdout and exits with depth as status
	callop	op_thr_code
	callop	op_tst_code
	sub
	exit
end_op

;;;

opBI	op_asrt, 1, 0	;	( t/f -- )	Assert top of stack is true
	comp
	endcomp
	comp
		litb	0xFF
		exit
	endcomp
	ifelse
	ret
end_op

opBI	op_asrteq, 1, 0	;	( a b -- )	Assert a and b are eq
	eq
	callop	op_asrt_code
	ret
end_op

opBI	op_asrtne, 1, 0	;	( a b -- )	Assert a and b are not eq
	eq
	not
	callop	op_asrt_code
	ret
end_op
